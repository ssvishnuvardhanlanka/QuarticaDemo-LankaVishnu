{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\quarticademo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Movie from './Movie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchText, setSearchText] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const API_KEY = \"8c17184c\";\n  const moviePlot = \" A plot is a crucial element for any story, and I challenge you to think of a great film or book that has a mediocre plot. But plot often seems to get confused or conflated with the characters, setting, and theme. In this post, we’re going to define plot, explain why it’s important, and then go over how you can build a great plot for your own story. Oh, and we’re going to use Die Hard as our classic plot example…Welcome to the party, pal!\";\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch(`http://www.omdbapi.com/?s=${searchText}&apikey=${API_KEY}`);\n      const data = await response.json();\n      if (data.Search) {\n        setMovies(data.Search);\n      }\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n  const handleSearch = () => {\n    fetchMovies();\n  };\n  const handleMovieClick = imdbID => {\n    if (selectedMovie === imdbID) {\n      setSelectedMovie(null);\n    } else {\n      setSelectedMovie(imdbID);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie Search App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchText,\n        onChange: e => setSearchText(e.target.value),\n        placeholder: \"Enter movie title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movie, {\n        movie: movie,\n        plot: moviePlot,\n        selected: selectedMovie === movie.imdbID,\n        onClick: () => handleMovieClick(movie.imdbID)\n      }, movie.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Ueyw6hyb7ml1KMoqmIc7aL0UbVo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Movie","jsxDEV","_jsxDEV","App","_s","searchText","setSearchText","movies","setMovies","selectedMovie","setSelectedMovie","API_KEY","moviePlot","fetchMovies","response","fetch","data","json","Search","error","console","handleSearch","handleMovieClick","imdbID","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","movie","plot","selected","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Documents/quarticademo/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Movie from './Movie';\n\nconst App = () => {\n  const [searchText, setSearchText] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n\n  const API_KEY = \"8c17184c\";\n  const moviePlot = \" A plot is a crucial element for any story, and I challenge you to think of a great film or book that has a mediocre plot. But plot often seems to get confused or conflated with the characters, setting, and theme. In this post, we’re going to define plot, explain why it’s important, and then go over how you can build a great plot for your own story. Oh, and we’re going to use Die Hard as our classic plot example…Welcome to the party, pal!\"\n\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch(`http://www.omdbapi.com/?s=${searchText}&apikey=${API_KEY}`);\n      const data = await response.json();\n      if (data.Search) {\n        setMovies(data.Search);\n      }\n    } catch (error) {\n      console.error('Error fetching movies:', error);\n    }\n  };\n\n  const handleSearch = () => {\n    fetchMovies();\n  };\n\n  const handleMovieClick = (imdbID) => {\n    if (selectedMovie === imdbID) {\n      setSelectedMovie(null);\n    } else {\n      setSelectedMovie(imdbID);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Movie Search App</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          placeholder=\"Enter movie title\"\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n      <div>\n        {movies.map((movie) => (\n          <Movie\n            key={movie.imdbID}\n            movie={movie}\n            plot={moviePlot}\n            selected={selectedMovie === movie.imdbID}\n            onClick={() => handleMovieClick(movie.imdbID)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}