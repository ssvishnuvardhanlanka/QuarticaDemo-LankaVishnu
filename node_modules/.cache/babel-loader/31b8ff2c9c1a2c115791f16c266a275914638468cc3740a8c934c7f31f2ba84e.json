{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\quarticademo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Movie from './Movie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchText, setSearchText] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const API_KEY = \"8c17184c\";\n\n  // const fetchMovies = async () => {\n  //   try {\n  //     const response = await fetch(`http://www.omdbapi.com/?s=${searchText}&apikey=${API_KEY}`);\n  //     const data = await response.json();\n  //     if (data.Search) {\n  //       setMovies(data.Search);\n  //     }\n  //   } catch (error) {\n  //     console.error('Error fetching movies:', error);\n  //   }\n  // };\n  // const fetchMovies = async () => {\n  //   try {\n  //     const response = await fetch(`http://www.omdbapi.com/?s=${searchText}&apikey=${API_KEY}`);\n  //     const data = await response.json();\n  //     if (data.Search) {\n  //       setMovies(data.Search.map((movie) => ({\n  //         ...movie,\n  //         imdbRating: movie.imdbRating || 'N/A',\n  //         Released: movie.Year || 'N/A',\n  //         Genre: movie.Genre || 'N/A',\n  //         Director: movie.Title || 'N/A',\n  //         Actors: movie.Actors || 'N/A',\n  //       })));\n  //     }\n  //   } catch (error) {\n  //     console.error('Error fetching movies:', error);\n  //   }\n  // };\n  const handleSearch = () => {\n    fetchMovies();\n  };\n  const handleMovieClick = imdbID => {\n    if (selectedMovie === imdbID) {\n      setSelectedMovie(null);\n    } else {\n      setSelectedMovie(imdbID);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Movie Search App \", movies.Title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: searchText,\n        onChange: e => setSearchText(e.target.value),\n        placeholder: \"Enter movie title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(Movie, {\n        movie: movie,\n        selected: selectedMovie === movie.imdbID,\n        onClick: () => handleMovieClick(movie.imdbID)\n      }, movie.imdbID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Ueyw6hyb7ml1KMoqmIc7aL0UbVo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Movie","jsxDEV","_jsxDEV","App","_s","searchText","setSearchText","movies","setMovies","selectedMovie","setSelectedMovie","API_KEY","handleSearch","fetchMovies","handleMovieClick","imdbID","children","Title","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","movie","selected","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Documents/quarticademo/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Movie from './Movie';\n\nconst App = () => {\n  const [searchText, setSearchText] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n\n  const API_KEY = \"8c17184c\";\n\n  // const fetchMovies = async () => {\n  //   try {\n  //     const response = await fetch(`http://www.omdbapi.com/?s=${searchText}&apikey=${API_KEY}`);\n  //     const data = await response.json();\n  //     if (data.Search) {\n  //       setMovies(data.Search);\n  //     }\n  //   } catch (error) {\n  //     console.error('Error fetching movies:', error);\n  //   }\n  // };\n  // const fetchMovies = async () => {\n  //   try {\n  //     const response = await fetch(`http://www.omdbapi.com/?s=${searchText}&apikey=${API_KEY}`);\n  //     const data = await response.json();\n  //     if (data.Search) {\n  //       setMovies(data.Search.map((movie) => ({\n  //         ...movie,\n  //         imdbRating: movie.imdbRating || 'N/A',\n  //         Released: movie.Year || 'N/A',\n  //         Genre: movie.Genre || 'N/A',\n  //         Director: movie.Title || 'N/A',\n  //         Actors: movie.Actors || 'N/A',\n  //       })));\n  //     }\n  //   } catch (error) {\n  //     console.error('Error fetching movies:', error);\n  //   }\n  // };\n  const handleSearch = () => {\n    fetchMovies();\n  };\n\n  const handleMovieClick = (imdbID) => {\n    if (selectedMovie === imdbID) {\n      setSelectedMovie(null);\n    } else {\n      setSelectedMovie(imdbID);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Movie Search App {movies.Title}</h1>\n      <div>\n        <input\n          type=\"text\"\n          value={searchText}\n          onChange={(e) => setSearchText(e.target.value)}\n          placeholder=\"Enter movie title\"\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n      <div>\n        {movies.map((movie) => (\n          <Movie\n            key={movie.imdbID}\n            movie={movie}\n            selected={selectedMovie === movie.imdbID}\n            onClick={() => handleMovieClick(movie.imdbID)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMa,OAAO,GAAG,UAAU;;EAE1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBC,WAAW,CAAC,CAAC;EACf,CAAC;EAED,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;IACnC,IAAIN,aAAa,KAAKM,MAAM,EAAE;MAC5BL,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLA,gBAAgB,CAACK,MAAM,CAAC;IAC1B;EACF,CAAC;EAED,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,GAAI,mBAAiB,EAACT,MAAM,CAACU,KAAK;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxCnB,OAAA;MAAAc,QAAA,gBACEd,OAAA;QACEoB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAElB,UAAW;QAClBmB,QAAQ,EAAGC,CAAC,IAAKnB,aAAa,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAmB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACFnB,OAAA;QAAQ0B,OAAO,EAAEhB,YAAa;QAAAI,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACNnB,OAAA;MAAAc,QAAA,EACGT,MAAM,CAACsB,GAAG,CAAEC,KAAK,iBAChB5B,OAAA,CAACF,KAAK;QAEJ8B,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEtB,aAAa,KAAKqB,KAAK,CAACf,MAAO;QACzCa,OAAO,EAAEA,CAAA,KAAMd,gBAAgB,CAACgB,KAAK,CAACf,MAAM;MAAE,GAHzCe,KAAK,CAACf,MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIlB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjB,EAAA,CAxEID,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA0ET,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}